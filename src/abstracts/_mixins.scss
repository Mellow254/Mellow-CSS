@use 'sass:list';
@use 'sass:map';
@use 'sass:string';
@use 'sass:math';

@use 'functions';
@use 'variables';
@use '../base';
@use '../defaults/flexbox';

/*
    Color Generetor
*/
// Generates the color custom property and matches it to the specific color hex
@mixin generate-color-variables($colors-map) {
    @each $color-name, $colors in $colors-map {
        --dark-#{$color-name}: #{list.nth($colors, 1)};
        --#{$color-name}: #{list.nth($colors, 2)};
        --light-#{$color-name}: #{list.nth($colors, 3)};
        --on-#{$color-name}: #{list.nth($colors, 4)};
    }
}

// Sets generated custom properties to the respective theme class
@mixin set-themed-colors($colors-map, $current-theme) {
    @each $theme, $colors in $colors-map {
        @if $theme == $current-theme {
            :root,
            .#{$theme} {
                @include generate-color-variables($colors);
            }
        } @else {
            .#{$theme} {
                @include generate-color-variables($colors);
            }
        }
    }
}

/*
    Color setter
*/

// Sets themed colors with passed setters by using previously generated custom properties
@mixin set-colors-with-respective-custom-property($setters, $colornames) {
    @each $setter in $setters {
        @each $colorname in $colornames {
            .#{$setter}-#{$colorname} {
                --dark-#{$setter}: var(--dark-#{$colorname});
                --#{$setter}: var(--#{$colorname});
                --light-#{$setter}: var(--light-#{$colorname});
                --on-#{$setter}: var(--on-#{$colorname});
            }
        }
    }
}

/*
    Color getters
*/
@mixin get-color-for-each-colorname-nuance-getter($getters, $setters) {
    @each $getter, $value in $getters {
        @each $setter in $setters {
            .#{$getter}-dark-#{$setter} {
                #{map.get($getters, $getter)}: var(--#{dark}-#{$setter});
            }

            .#{$getter}-#{$setter} {
                #{map.get($getters, $getter)}: var(--#{$setter});
            }

            .#{$getter}-light-#{$setter} {
                #{map.get($getters, $getter)}: var(--#{light}-#{$setter});
            }

            .#{$getter}-on-#{$setter} {
                #{map.get($getters, $getter)}: var(--#{on}-#{$setter});
            }
        }
    }
}

/*
Flexbox classes
*/
@mixin generate-basic-flexbox-options($classnames-map) {
    @each $property, $options in flexbox.$properties {
        @each $option in $options {
            $classname: map.get($classnames-map, $property);
            @if string.length($classname) > 1 {
                .#{$classname}-#{$option} {
                    #{$property}: #{$option};
                }
            } @else {
                .#{$option} {
                    #{$property}: #{$option};
                }
            }
        }
    }
}

@mixin generate-flex-flow-options {
    $direction-options: map.get(flexbox.$properties, 'flex-direction');
    $wrap-options: map.get(flexbox.$properties, 'flex-wrap');

    @each $direction in $direction-options {
        @each $wrap in $wrap-options {
            .flex-flow-#{$direction}-#{$wrap} {
                flex-flow: #{$direction} #{$wrap};
            }
        }
    }
}

@mixin generate-options-for-each-overflow-flex-property($options, $property) {
    $overflow-options: (safe, unsafe);

    @each $overflow-option in $overflow-options {
        @each $option in $options {
            $transformed-option: functions.replace-string($option, ' ', '-');
            .#{$overflow-option}-#{$property}-#{$transformed-option} {
                #{$property}: #{$overflow-option} #{$option};
            }
        }
    }
}

@mixin generate-options-for-overflow-flex-properties {
    $align-items-properties: map.get(flexbox.$properties, 'align-items');
    $align-content-properties: map.get(flexbox.$properties, 'align-content');
    $justify-content-properties: map.get(
        flexbox.$properties,
        'justify-content'
    );

    @include generate-options-for-each-overflow-flex-property(
        $align-items-properties,
        'align-items'
    );
    @include generate-options-for-each-overflow-flex-property(
        $align-content-properties,
        'align-content'
    );
    @include generate-options-for-each-overflow-flex-property(
        $justify-content-properties,
        'justify-content'
    );
}

/*
    Flexible sizing custom properties not tied to any unit
*/
@mixin root-spacing-values($sizes) {
    :root {
        @each $value in $sizes {
            --s-#{functions.replace-string($value, ".", "")}: #{$value};
        }
    }
}

/*
    Spacing setters -  Padding, Margin, Gap
*/

@mixin spacing-setter($sizes, $setters, $breakpoint: null) {
    @each $size in $sizes {
        $class-suffix: functions.replace-string($size, '.', '');
        @if $breakpoint {
            $class-suffix: #{$class-suffix}-#{$breakpoint};
        }
        @each $setter in $setters {
            .#{$setter}-#{$class-suffix} {
                --#{$setter}: #{$size}rem;
            }
        }
    }
}

@mixin generate-spacing-setter($sizes, $setters, $breakpoints: null) {
    @if $breakpoints {
        @each $key, $value in $breakpoints {
            @include base.media-query($value) {
                @include spacing-setter($sizes, $setters, $key);
            }
        }
    } @else {
        @include spacing-setter($sizes, $setters);
    }
}

/*

    Spacing getters

*/

@mixin generate-spacing-getter($getters, $setters) {
    @each $getter, $value in $getters {
        @each $setter in $setters {
            .#{$getter} {
                #{$value}: var(--#{$setter});
            }
        }
    }
}

/*
    Static layout
*/

@mixin static-classes($properties, $classnames-map, $breakpoint: null) {
    @each $property, $options in $properties {
        $class-suffix: map.get($classnames-map, $property);

        @if $breakpoint {
            $class-suffix: #{$breakpoint}-#{$class-suffix};
        }
        @each $option in $options {
            .#{$class-suffix}-#{$option} {
                #{$property}: #{$option};
            }
        }
    }
}

@mixin generate-static-layout-classes($classnames-map) {
    @include static-classes(base.$layout-properties, $classnames-map);
}

@mixin generate-responsive-static-layout-classes(
    $classnames-map,
    $breakpoints
) {
    @each $key, $value in $breakpoints {
        @include base.media-query($value) {
            @include static-classes(
                base.$layout-properties,
                $classnames-map,
                $key
            );
        }
    }
}

/*

    Static Typography

*/

@mixin generate-static-typography-classes($classnames-map) {
    @include static-classes(base.$typography-properties, $classnames-map);
}

@mixin generate-responsive-static-typography-classes(
    $classnames-map,
    $breakpoints
) {
    @each $key, $value in $breakpoints {
        @include base.media-query($value) {
            @include static-classes(
                base.$typography-properties,
                $classnames-map,
                $key
            );
        }
    }
}

/*
    Sized typography
*/

@mixin typography-from-range-of-values(
    $properties,
    $range-values,
    $classnames-map,
    $breakpoint: null
) {
    @each $property, $unit in $properties {
        $class-prefix: map.get($classnames-map, $property);

        @if $breakpoint {
            $class-prefix: #{$breakpoint}-#{$class-prefix};
        }

        @each $value in $range-values {
            $class-suffix: functions.replace-string($value, '.', '');
            .#{$class-prefix}-#{$class-suffix} {
                #{$property}: #{$value}#{$unit};
            }
        }
    }
}

@mixin generate-typography-from-range-of-values(
    $properties,
    $range-values,
    $classnames-map
) {
    @include typography-from-range-of-values(
        $properties,
        $range-values,
        $classnames-map
    );
}

@mixin generate-responsive-typography-from-range-of-values(
    $properties,
    $range-values,
    $classnames-map,
    $breakpoints
) {
    @each $key, $value in $breakpoints {
        @include base.media-query($value) {
            @include typography-from-range-of-values(
                $properties,
                $range-values,
                $classnames-map,
                $key
            );
        }
    }
}
