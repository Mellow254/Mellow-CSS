@use 'sass:list';
@use 'sass:map';
@use 'sass:string';
@use 'sass:math';

@use 'functions';
@use '../base';

/*

Generates the color variables with different shades of a color

*/
@mixin generate-color-variables($colors) {
    @each $color, $nuance in $colors {
        --dark-#{$color}: #{list.nth($nuance, 1)};
        --#{$color}: #{list.nth($nuance, 2)};
        --light-#{$color}: #{list.nth($nuance, 3)};
        --on-#{$color}: #{list.nth($nuance, 4)};
    }
}

/*
Sets the colors for the current theme
*/
@mixin set-themed-colors($colors-map, $current-theme) {
    @each $theme, $colors in $colors-map {
        @if $theme == $current-theme {
            :root,
            .#{$theme} {
                @include generate-color-variables($colors);
            }
        } @else {
            .#{$theme} {
                @include generate-color-variables($colors);
            }
        }
    }
}

/*

Sets the colors for the current theme

*/
@mixin color-setters($setters, $colornames) {
    @each $setter-option in $setters {
        @each $color in $colornames {
            .#{$setter-option}-#{$color} {
                --dark-#{$setter-option}: var(--dark-#{$color});
                --#{$setter-option}: var(--#{$color});
                --light-#{$setter-option}: var(--light-#{$color});
                --on-#{$setter-option}: var(--on-#{$color});
            }
        }
    }
}

/*

Color getters

*/
@mixin color-getters($getters, $shades, $setters) {
    @each $getter, $value in $getters {
        @each $shade in $shades {
            @each $setter in $setters {
                @if $shade == base {
                    .#{$getter}-#{$setter} {
                        #{$value}: var(--#{$setter});
                    }
                } @else if $shade == trans {
                    .#{$getter}-on-#{$setter} {
                        #{$value}: var(--on-#{$setter});
                    }
                } @else {
                    .#{$getter}-#{$shade}-#{$setter} {
                        #{$value}: var(--#{$shade}-#{$setter});
                    }
                }
            }
        }
    }
}

$descriptor-keys: (
    1: 'font-family',
    2: 'font-weight',
    3: 'font-style',
);

/*

Generates the
@font-face {
    font-family
    font-weight
    font-style
    src
} Structure

*/
@mixin generate-font-face($font-file) {
    $start-at: string.index($font-file, 'fonts/') + string.length('fonts/');
    $file: string.slice($font-file, $start-at, $end-at: -1);

    // Generate font-face descriptors
    $descriptors: (
        font-style: normal,
        font-weight: 400,
    );
    $slice-start-index: 1;
    $descriptor-index: 1;
    @for $i from 1 through string.length($file) {
        $current-char: string.slice($file, $i, $i);

        @if $current-char == '-' or $current-char == '.' {
            $value: string.slice($file, $slice-start-index, $i - 1);
            $descriptors: map.set(
                $descriptors,
                map.get($descriptor-keys, $descriptor-index),
                $value
            );
            $descriptor-index: $descriptor-index + 1;
            $slice-start-index: $i + 1;
        }
    }

    // generate font-face from descriptors
    @font-face {
        font-family: map.get($descriptors, 'font-family');
        src: url(string.quote(#{$font-file})) format('woff'),
            url(string.quote(#{$font-file}2)) format('woff2');
        font-style: string.unquote(map.get($descriptors, 'font-style'));
        font-weight: string.unquote(map.get($descriptors, 'font-weight'));
    }
}

/*
Uses the Generate fonts fontface or remote link
*/

@mixin generate-fonts($fonts) {
    @if $fonts {
        $hosted-fonts: map.get($fonts, hosted);
        $custom-fonts: map.get($fonts, custom);

        @if $hosted-fonts {
            @each $hosted-font, $url in $hosted-fonts {
                @import url($url);
            }

            body {
                font-family: map.keys($hosted-fonts), sans-serif;
            }
        } @else {
            @if $custom-fonts {
                $first-font: list.nth($custom-fonts, 1);

                body {
                    font-family: string.slice(
                            $first-font,
                            string.index($first-font, 'fonts/') +
                                string.length('fonts/'),
                            string.index($first-font, '-') - 1
                        ),
                        sans-serif;
                }
                @each $font-file in $custom-fonts {
                    @include generate-font-face($font-file);
                }
            }
        }
    }
}

/*

Flexbox classes

*/
@mixin generate-flexbox($properties) {
    @each $property-type, $property-map in $properties {
        @if $property-type == single {
            @each $property, $values in $property-map {
                @each $value in $values {
                    $res: functions.replace-string($value, ' ', '-');
                    .#{$property}-#{$res} {
                        #{$property}: $value;
                    }
                }
            }
        } @else if $property-type == overflows {
            $overflow-options: (safe, unsafe);
            @each $property in $property-map {
                $values: map.get(map.get($properties, single), $property);
                @each $value in $values {
                    $res: functions.replace-string($value, ' ', '-');
                    @each $overflow-option in $overflow-options {
                        .#{$overflow-option}-#{$property}-#{$res} {
                            #{$property}: $overflow-option $value;
                        }
                    }
                }
            }
        } @else {
            @each $property, $constituent-properties in $property-map {
                $prefixes: map.get(
                    map.get($properties, single),
                    map.get($constituent-properties, prefix)
                );
                $suffixes: map.get(
                    map.get($properties, single),
                    map.get($constituent-properties, suffix)
                );
                @each $prefix in $prefixes {
                    @each $suffix in $suffixes {
                        .#{$property}-#{$prefix}-#{$suffix} {
                            #{$property}: $prefix $suffix;
                        }
                    }
                }
            }
        }
    }
}

/*

    Flexible sizing custom properties not tied to any unit

*/

@mixin root-spacing-values($sizes) {
    :root {
        @for $i from 1 through list.length($sizes) {
            $val: list.nth($sizes, $i);

            --s-#{$i}: #{$val};
        }
    }
}

/*

    Spacing setters -  Padding, Margin, Gap

*/

@mixin spacing-setter($sizes, $setters, $breakpoint: null) {
    @each $size in $sizes {
        $class-suffix: functions.replace-string($size, '.', '');
        @if $breakpoint {
            $class-suffix: #{$class-suffix}-#{$breakpoint};
        }
        @each $setter in $setters {
            .#{$setter}-#{$class-suffix} {
                --#{$setter}: #{$size}rem;
            }
        }
    }
}

@mixin generate-spacing-setter($sizes, $setters, $breakpoints: null) {
    @if $breakpoints {
        @each $key, $value in $breakpoints {
            @include base.media-query($value) {
                @include spacing-setter($sizes, $setters, $key);
            }
        }
    } @else {
        @include spacing-setter($sizes, $setters);
    }
}

/*

    Spacing getters

*/

@mixin spacing-getter($getters, $setters) {
    @each $getter, $value in $getters {
        @each $setter in $setters {
            .#{$getter} {
                #{$value}: var(--#{$setter});
            }
        }
    }
}

/*

    Static layout and typography

*/
@mixin static-layout-typography($properties, $breakpoint: null) {
    @each $property, $property-values in $properties {
        $class: map.get($property-values, class);
        $values: map.get($property-values, values);

        @each $value in $values {
            @if $breakpoint {
                $value: #{$value}-#{$breakpoint};
            }
            .#{$class}-#{$value} {
                #{$property}: $value;
            }
        }
    }
}

@mixin generate-static-layout-typography($properties, $breakpoints: null) {
    @if $breakpoints {
        @each $key, $value in $breakpoints {
            @include base.media-query($value) {
                @include static-layout-typography($properties, $key);
            }
        }
    } @else {
        @include static-layout-typography($properties);
    }
}

/*
    Sizing typography
*/

@mixin static-typography($properties, $sizes, $breakpoint: null) {
    @each $class, $value in $properties {
        @each $size in $sizes {
            $class-suffix: functions.replace-string($size, '.', '');
            @if $breakpoint {
                $class-suffix: #{$class-suffix}-#{$breakpoint};
            }
            .#{$class}-#{$class-suffix} {
                #{$value}: #{$size}em;
            }
        }
    }
}

@mixin generate-static-typography($properties, $sizes, $breakpoints: null) {
    @if $breakpoints {
        @each $key, $value in $breakpoints {
            @include base.media-query($value) {
                @include static-typography($properties, $sizes, $key);
            }
        }
    } @else {
        @include static-typography($properties, $sizes);
    }
}
