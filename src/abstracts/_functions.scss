@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:string';
@use 'sass:meta';

// Retrieves the color names from the color map
@function get-colornames-from-map($colors-map, $theme) {
    $keys-list: ();

    @each $color-name, $colors in map.get($colors-map, $theme) {
        $keys-list: list.append($keys-list, $color-name);
    }

    @return $keys-list;
}

// Globally Replaces a string with another string
@function replace-string($string, $search, $replace: '') {
    $quoted-string: string.quote(#{$string});
    $end-index: string.index($quoted-string, $search);

    @if $end-index {
        @return string.slice($quoted-string, 1, $end-index - 1) + $replace +
            replace-string(
                string.slice(
                    $quoted-string,
                    $end-index + string.length($search)
                ),
                $search,
                $replace
            );
    }

    @return $string;
}

@function calculate-sizes-from-range($args) {
    $start: map.get($args, 'start');
    $end: map.get($args, 'end');
    $scale: map.get($args, 'scale');
    $values: ($start);

    @for $i from 1 through math.ceil(calc($end / $scale)) - 1 {
        $prev-value: list.nth($values, $i);
        $current-value: $prev-value + $scale;
        $values: list.append($values, $current-value);
    }

    @return $values;
}
